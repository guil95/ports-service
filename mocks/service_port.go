// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/guil95/ports-service/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ServicePort is an autogenerated mock type for the ServicePort type
type ServicePort struct {
	mock.Mock
}

// CreateOrUpdate provides a mock function with given fields: ctx, port
func (_m *ServicePort) CreateOrUpdate(ctx context.Context, port domain.Port) error {
	ret := _m.Called(ctx, port)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Port) error); ok {
		r0 = rf(ctx, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, portID
func (_m *ServicePort) FindByID(ctx context.Context, portID string) (*domain.Port, error) {
	ret := _m.Called(ctx, portID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Port
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Port, error)); ok {
		return rf(ctx, portID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Port); ok {
		r0 = rf(ctx, portID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Port)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, portID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportPorts provides a mock function with given fields: ctx
func (_m *ServicePort) ImportPorts(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ImportPorts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServicePort creates a new instance of ServicePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServicePort {
	mock := &ServicePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
